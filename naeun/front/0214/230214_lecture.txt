<!-- 

  <!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
   웹브라우저에 스크롤을 생기게 하기 위해 body 태그에 너비, 높이 추가 
  body{
    width: 2500px;
    height: 5000px;
  }
 스크롤되어도 버튼이 따라다니게 하기 위해 fixed 속성값 추가 
  button{
    position: fixed;
    left: 10px;
    top: 10px;
  }
  </style>
</head>
<body>
  <button onclick="printInfo()">window객체 속성</button> 


  <script>
    function printInfo(){
      console.log(`웹브라우저의 너비 (innerwidth): ${window.innerWidth}`);
      console.log(`웹브라우저의 높이 (innerheight): ${window.innerHeight}`);
      console.log(`웹브라우저의 창의 너비 (outerwidth): ${window.outerWidth}`);
      console.log(`웹브라우저의 창의 높이 (outerheight): ${window.outerHeights}`);
      console.log(`웹브라우저의 창의 위쪽면과 모니터 사이의간격 (screenTop,screenY): ${window.screenTop}/${window.screenY}`);
      console.log(`웹브라우저의 창의 위쪽면과 모니터 사이의간격 (screenLeft,screenX): ${window.screenLeft}/${window.screenX}`);
      console.log(`웹브라우저의 창의 스크롤 가로위치 (scrollX): ${window.scrollX}`);
      console.log(`웹브라우저의 창의 스크롤 세로위치 (scrollY): ${window.scrollY}`);
    }
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <button onclick="popup()"></button>
  <script>
    function popup(){
      window.open('http://www.naver.com','팝업','width=200,height=100'); //'팝업' 없이 '' 만 있다면 버튼 누르는 횟수만큼 팝업 진행.
    }
  </script>
</body>
</html>
 -->
<!-- 

 <!DOCTYPE html>
 <html lang="en">
 <head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
 </head>
 <body>
  <button onclick="window.close()">버튼</button>
 </body>
 </html> -->



 <!DOCTYPE html>
 <html lang="en">
 <head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    body{
      width: 5000px;
      height: 5000px;
    }
    button{
      position: fixed;
      top: 10px;
      left: 10px;
    }
  </style>
 </head>
 <body>
  <button onclick="sTo()">scrollTo(100,200)</button> 
  <button onclick="sBy()">scrollBy(100,200)</button>

  <script>
    function sTo(){
      window.scrollTo(100,200);
    }
    function sBy(){
      window.scrollBy(100,200);
    }
  </script>
 </body>
 </html>

왜 바로 window 메소드 안쓰고 함수로 간접적으로 사용하는지?





<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta http-equiv="X-UA-Compatible" content="IE=edge">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>Document</title>
 <style>
   body{
     width: 5000px;
     height: 5000px;
     background: linear-gradient(black,blue);
   }
   button{
     position: fixed;
     top: 10px;
     left: 10px;
   }
 </style>
</head>
<body>
 <button onclick="sTo()">scrollTo(4000)</button> 
 <button onclick="sBy()">scrollBy(200)</button>

 <script>
   function sTo(){
     window.scrollTo({Top:4000, behavior:'smooth'});
   }
   function sBy(){
     window.scrollBy({Top:200, behavior:'smooth'});
   }
 </script>
</body>
</html>


<!-- for문
- 배열의 첫번째 뿐만 아니라 n번째에서 돌 수도 있음
- 단순히 배열을 순회하려는 목적에 비해서 많은 작업이 필요함 (추가적인 변수 선언 및, 증가, 길이 계산 등)
for in문 (객체)
key 값만 가져올 수 있음
key 값의 타입에서 볼 수 있다시피, 숫자가 아니고 문자열로 나온다.
for each
- await을 루프 내부에 쓸 수 없음
- forEach() 중간에 루프를 탈출하는 것이 곤란 또는 some. 다른 문법의 경우엔, break로 가능
for of
모든 루프를 원하는 대로 순회할 수 있다.
await을 사용한 for-await-of가 가능하다.
break continue를 사용할 수 있다.
for-of를 활용하면, 키만 접근하거나, 혹은 키와 값 모두 접근하거나 하는 것이 모두 가능하다. -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <h1 id="title">title</h1>
  <p class="text">text1</p>  
  <p class="text">text2</p>
  <script>
    const el=document.getElementById("title"); //HTML id명으로 선택
    console.log(el);
    const classEl=document.getElementsByClassName("text"); //HTML class명으로 선택
    console.log(classEl);
    for(let el of classEl){ //값이 2개 이상이라 배열로 저장된 classEl 출력
      console.log(el);
    };
    const tagEls=document.getElementsByTagName("p"); //HTML tag명으로 선택
    console.log(tagEls);
    for(let el of tagEls){//값이 2개 이상이라 배열로 저장된 atgEls 출력
      console.log(el);
    };
  </script>  
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>querySelector</title>
</head>
<body>
  <div class="box-1">
    <p class="text">text1</p>
    <p class="text">text2</p>
  </div>
  <div class="box-2">
    <p class="text">text3</p>
    <p class="text">text4</p>
  </div>
  <script>
    const el=document.querySelector(".box-1")
    // const el=getElementsByClassName("box-1")[0];
    console.log(el);
  </script>
</body>
</html>

<!-- HTMLCollection과 Nodelist 차이
모두 유사 배열 객체이면서 (반복가능한) 이터러블 
따라서 둘다 length프로퍼티를 가지므로 객제를 배열처럼 접근할 수 있고, 반복문을 돌수있다
그러나 유사 배열 객체이기 때문에 자바스크립트에서 제공하는 배열 객체의 메소드는 사용불가. -->

<!-- - HTMLCollection
    - 태그 : getElementsByTagName,getElementsByClassName
    - 프로퍼티 : HTMLCollection.length
    - 메서드 : HTMLCollection.item(), HTMLCollection.namedItem()
    - live 객체 : 노드 객체의 상태 변화를 실시간으로 반영O
    - forEach 함수 사용 불가
- NodeList
    - 태그 : querySelectorAll
    - 프로퍼티 : NodeList.length
    - 메서드 : NodeList.item(), NodeList.entries(), NodeList.forEach(), NodeList.keys(), NodeList.values()
    - 대부분 Non-live 객체 : 노드 객체의 상태 변화를 실시간으로 반영X, 과거의 정적 상태를 유지
    - childNodes 프로퍼티는 live 객체
    - forEach 사용 가능 - 향상된 for문 배열 자체를 순회하는 메소드-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <p id="text">text</p>
  <script>
    const ee=document.querySelector("p");
    ee.style.color="red";
  </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>.red-color{
    color: red;
  } </style>
</head>
<body>
  <p id="text">text</p>
  <script>
    const ee=document.querySelector("#text");
    setInterval(function() {
      ee.classList.toggle("red-color");
    }, 1000);
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>.red-color{
    color: red;
  } </style>
</head>
<body>
  <p id="text">text</p>
  <script>
    const ee=document.querySelector("#text");
    ee.classList.remove("red-color");
  </script>
</body>
</html>
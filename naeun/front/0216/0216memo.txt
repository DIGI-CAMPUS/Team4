onfocus// 활성화 onblur//비활성화

JavaScript Data types
string, number, boolean, undefined, null, sybol + object

typeof연산자
let msg = "message";

console.log(typeof msg); // "string"
console.log(typeof 100); // "number"

typeof null === "object" //null은 빈 객체를 참조
typeof [] === "object" //배열은 확장된 객체

// 문자열 데이터 타입 변수 선언
let name = "pizza";
// .length >> 문자열이 몇 글자로 되어 있는지 확인
name.length // 5
// .toUpperCase >> 문자열을 대문자로 출력
name.toUpperCase() // "PIZZA"
// .indexOf >> 특정 텍스트의 포함 유무 및 위치 확인
name.indexOf('z') // 2
name.indexOf('j') // -1 없으면 -1. 순서를 출력하기 때문인가?


console.log로 출력시 boolean 값으로 출력되는 경우: !0
✔️ `true` 로 변환되는 값

- 문자열 : 비어 있지 않은 모든 문자열
- 숫자 : 0 이 아닌 모든 숫자
- 객체: 모든 객체 (`{ }`, `[ ]` 포함)

✔️ `false` 로 변환되는 값

- 문자열 : `" "` (빈문자열)
- 숫자 : 0, `NaN`
- 객체 : `null`
- `undefined`


let, var 키워드를 사용해서 변수를 정의할 때 초기화 하지 않았다면, 즉 변수를 선언만 하고 값을 할당하지 않았다면 변수에는 undefined 가 할당됩니다.
const는 선언 시 반드시 초기화 필요!

function은  typeof function(); 시 function으로 나옴. function은 객체에 포함임.

코딩 컨벤션(코드작성가이드).
세계에서 가장 보기좋게 코딩컨벤션을 작성한 곳은 airbnb
https://github.com/airbnb/javascript


if (phoneNumber.length !== 10 &&  phoneNumber.length !== 11) {
  alert("폰 번호 제대로 입력하셨나요?");
}
핸드폰번호는 문자열로 저장.(0으로 시작하는 숫자를 지정해놓을수 없음)
+length는 문자열에서만 쓸 수있는 내장 메소드로 자리 수 검증 위해서 문자열로 사용필요.


문자열 메소드 slice(잘릴 시작위치, 잘릴 끝위치)
ex) .slice(0,12)
0부터 11번째 자리 텍스트 slice하여 반환

c, 자바는 변수 자료형이 확정되면 변경 불가. 
js는 가능
문자열-문자열 인 경우
js는 값 살펴보고 모든 항이 숫자인 경우 숫자로 계산해줌.

Q) js는 왜 소수*소수 거래를 잘 못할까?

ex)
console.log(typeof parseInt("1.901")); //parseInt는 정수만 남김
console.log(typeof parseFloat("1.901")); 
console.log(typeof Number("1.901")); //소수가능
console.log(typeof (parseInt("200") + 1));

문자열을 숫자로 전환)
Number("N") or parsInt, parseFloat, ("N"- 0) //- 연산 시 문자열에 숫자만 있을 경우 전환해줌.
숫자를 문자열로 전환)
toString(), (n+"")//문자열과 연산 시 문자열로 전환


new 연산자와 Date(); 생성자를 함께 사용.
gmt 기준. (한국시간은 gmt+9h) ->변환필요

var rightNow = new Date();
console.log(rightNow.getFullYear());
console.log(rightNow.getMonth()); //0~11 까지 출력. index값으로 만든 듯.
console.log(rightNow.getDate()); //얘는 잘나옴.
console.log(rightNow.getDay()); //요일. 1==월요일 7==일요일
console.log(rightNow.getHours()); //0~23
console.log(rightNow.getMinutes()); //0~59


console.log(rightNow.getTime()); //기준일 ===1970년 1월 1일로부터 해당 밀리초가 지났다는 의미. (230206 17:22 기준 1676535661757)
`getTime` 메소드로 반환된 숫자로 비교연산을 통해 언제가 더 과거인지 판단할 수 있다->값이 더 작으면 과거.
new Date(); 값은 string.
나머지는 number

//날짜 마지막 예제



